/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
## ----------------------------------------------------------------------
#set( $entityClassName = "${entity.name}EntityRec" )
#set( $keyClassName    = "${entity.name}EntityKey" )
#set( $recordClassName = "${entity.name}Record" )
## ----------------------------------------------------------------------
#if ( $entity.hasCompositePrimaryKey() )
#set( $primaryKeyType = "${entity.name}EntityKey" )
#else 
#set( $primaryKeyType = $entity.keyAttributes[0].wrapperType )
#end
## ----------------------------------------------------------------------

package ${target.javaPackageFromFolder($SRC)};

#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import java.util.List;

import javax.inject.Named;

import ${ROOT_PKG}.record.${recordClassName}; // Neutral 'record' class 
import ${ROOT_PKG}.persistence.jpa.record.${entityClassName}; // JPA 'entity' class 
#if ( $entity.hasCompositePrimaryKey() )
## import ${ENTITY_PKG}.jpa.${entity.name}EntityKey;
import ${ROOT_PKG}.persistence.jpa.record.${keyClassName};
#end
import ${ROOT_PKG}.persistence.jpa.commons.GenericJpaService;
import ${ROOT_PKG}.persistence.jpa.mapper.${entity.name}Mapper;

import ${ROOT_PKG}.persistence.${entity.name}Persistence;

/**
 * JPA implementation for basic persistence operations ( entity "${entity.name}" )
 * 
 * @author Telosys Tools Generator
 *
 */
@Named("${entity.name}Persistence")
public class ${entity.name}PersistenceJPA extends GenericJpaService<${entityClassName}, $primaryKeyType> implements ${entity.name}Persistence {

	private final ${entity.name}Mapper mapper = new ${entity.name}Mapper();

	/**
	 * Constructor
	 */
	public ${entity.name}PersistenceJPA() {
		super(${entityClassName}.class);
	}

	@Override
	public ${recordClassName} findById( $fn.argumentsListWithWrapperType( $entity.keyAttributes ) ) {
#if ( $entity.hasCompositePrimaryKey() )
		// Build the composite key
		$primaryKeyType key = new $primaryKeyType( $fn.argumentsList( $entity.keyAttributes ) );
		${entityClassName} entity = super.find( key );
#else
		${entityClassName} entity = super.find( $fn.argumentsList( $entity.keyAttributes ) );
#end
		return mapper.mapEntityToRecord(entity);	
	}

	@Override
	public List<${recordClassName}> findAll() {
		List<${entityClassName}> entities = super.loadAll() ;
		List<${recordClassName}> records = new java.util.LinkedList<${recordClassName}>();
		for ( ${entityClassName} entity : entities ) {
			records.add( mapper.mapEntityToRecord(entity) ) ;
		}
		return records ;
	}

	@Override
	public ${recordClassName} create(${recordClassName} record) {
		${entityClassName} entity = mapper.mapRecordToEntity(record);
		super.persist(entity);
		return record ;
	}
	
	@Override
	public boolean update(${recordClassName} record) {
#if ( $entity.hasCompositePrimaryKey() )
		// Build the composite key
		$primaryKeyType pk = new $primaryKeyType( $fn.argumentsListWithGetter( "record", $entity.keyAttributes ) );
#else
		$primaryKeyType pk = $fn.argumentsListWithGetter( "record", $entity.keyAttributes ) ;
#end	
		if ( super.find( pk ) != null ) {
			// Exists => 'merge' 
			${entityClassName} entity = mapper.mapRecordToEntity(record);
			super.merge(entity);
			return true ;
		}
		else {
			return false;
		}
	}

	@Override
	public ${recordClassName} save(${recordClassName} record) {
		${entityClassName} entity = mapper.mapRecordToEntity(record);
		super.merge(entity);
		return record ;
	}

	@Override
	public boolean deleteById( $fn.argumentsListWithWrapperType( $entity.keyAttributes ) ) {
#if ( $entity.hasCompositePrimaryKey() )
		// Build the composite key
		$primaryKeyType key = new $primaryKeyType( $fn.argumentsList( $entity.keyAttributes ) );
		return super.remove( key );
#else
		return super.remove( $fn.argumentsList( $entity.keyAttributes ) );
#end	
	}

	@Override
	public boolean delete(${recordClassName} record) {
		if ( record != null ) {
#if ( $entity.hasCompositePrimaryKey() )
			// Build the composite key
			$primaryKeyType key = new $primaryKeyType( $fn.argumentsListWithGetter( "record", $entity.keyAttributes ) );
			return super.remove( key );
#else
			return super.remove( $fn.argumentsListWithGetter( "record", $entity.keyAttributes ) );
#end	
		}
		return false ;
	}

/*
	//@Override
	public long countAll() {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				Query query = em.createNamedQuery("${entity.name}Entity.countAll");
				return query.getSingleResult() ;
			}
		} ;
		// JPA operation execution 
		return (Long) execute(operation);
	}
*/

	public long countAll() {
		Long count = (Long) super.execNamedQueryWithSingleResult("AuthorEntity.countAll") ;
		return count ;
	}

	@SuppressWarnings("unchecked")
	public List<${entityClassName} > queryExample() {
		List<?> r = super.execNamedQuery("AuthorEntity.countAll") ;
		return (List<${entityClassName} >) r ;
	}

}
