/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
##--------------------------------------------------------------------------------------------------------
#set( $entityClassName = "${entity.name}EntityRec" )
#set( $recordClassName = "${entity.name}Record" )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${SRC})};

import ${ROOT_PKG}.persistence.jpa.commons.AbstractServiceMapper;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;

import ${ROOT_PKG}.record.${recordClassName}; // "Neutral Record" class 
import ${ROOT_PKG}.persistence.jpa.record.${entityClassName}; // "JPA Entity" class 

/**
 * Mapping between entity beans and display beans.
 */
public class ${entity.name}Mapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ${entity.name}Mapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

#set($uncapitalizedName = $fn.uncapitalize(${entity.name}) )
	/**
	 * Mapping from '${entity.name}Entity' to '${entity.name}'
	 * @param entity the 'input' entity 
	 */
	public $recordClassName mapEntityToRecord ( ${entityClassName} entity) {
		if ( entity == null ) {
			return null;
		}

		//--- Generic mapping 
		${recordClassName} record = map(entity, ${recordClassName}.class);

		return record ;
	}
	
	/**
	 * Mapping from record '${recordClassName}' to entity '${entityClassName}'
	 * @param $uncapitalizedName
	 * @param ${uncapitalizedName}Entity
	 */
	public void mapRecordToEntity(${recordClassName} record, ${entityClassName} entity) {
		if ( record == null ) {
			return;
		}

		//--- Generic mapping 
		map(record, entity);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}